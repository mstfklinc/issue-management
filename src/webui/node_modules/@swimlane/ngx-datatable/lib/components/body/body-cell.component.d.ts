import { ChangeDetectorRef, EventEmitter, ElementRef, ViewContainerRef, OnDestroy, DoCheck } from '@angular/core';
import { TableColumn } from '../../types/table-column.type';
import { SortDirection } from '../../types/sort-direction.type';
import * as ɵngcc0 from '@angular/core';
export declare type TreeStatus = 'collapsed' | 'expanded' | 'loading' | 'disabled';
export declare class DataTableBodyCellComponent implements DoCheck, OnDestroy {
    private cd;
    displayCheck: (row: any, column?: TableColumn, value?: any) => boolean;
    group: any;
    rowHeight: number;
    isSelected: boolean;
    expanded: boolean;
    rowIndex: number;
    column: TableColumn;
    row: any;
    sorts: any[];
    treeStatus: TreeStatus;
    activate: EventEmitter<any>;
    treeAction: EventEmitter<any>;
    cellTemplate: ViewContainerRef;
    readonly columnCssClasses: any;
    readonly width: number;
    readonly minWidth: number;
    readonly maxWidth: number;
    readonly height: string | number;
    sanitizedValue: any;
    value: any;
    sortDir: SortDirection;
    isFocused: boolean;
    onCheckboxChangeFn: any;
    activateFn: any;
    cellContext: any;
    private _isSelected;
    private _sorts;
    private _column;
    private _row;
    private _group;
    private _rowHeight;
    private _rowIndex;
    private _expanded;
    private _element;
    private _treeStatus;
    constructor(element: ElementRef, cd: ChangeDetectorRef);
    ngDoCheck(): void;
    ngOnDestroy(): void;
    checkValueUpdates(): void;
    onFocus(): void;
    onBlur(): void;
    onClick(event: MouseEvent): void;
    onDblClick(event: MouseEvent): void;
    onKeyDown(event: KeyboardEvent): void;
    onCheckboxChange(event: any): void;
    calcSortDir(sorts: any[]): any;
    stripHtml(html: string): string;
    onTreeAction(): void;
    calcLeftMargin(column: any, row: any): number;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<DataTableBodyCellComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<DataTableBodyCellComponent, "datatable-body-cell", never, { "group": "group"; "rowHeight": "rowHeight"; "isSelected": "isSelected"; "expanded": "expanded"; "rowIndex": "rowIndex"; "column": "column"; "row": "row"; "sorts": "sorts"; "treeStatus": "treeStatus"; "displayCheck": "displayCheck"; }, { "activate": "activate"; "treeAction": "treeAction"; }, never, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9keS1jZWxsLmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJib2R5LWNlbGwuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENoYW5nZURldGVjdG9yUmVmLCBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIFZpZXdDb250YWluZXJSZWYsIE9uRGVzdHJveSwgRG9DaGVjayB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVGFibGVDb2x1bW4gfSBmcm9tICcuLi8uLi90eXBlcy90YWJsZS1jb2x1bW4udHlwZSc7XG5pbXBvcnQgeyBTb3J0RGlyZWN0aW9uIH0gZnJvbSAnLi4vLi4vdHlwZXMvc29ydC1kaXJlY3Rpb24udHlwZSc7XG5leHBvcnQgZGVjbGFyZSB0eXBlIFRyZWVTdGF0dXMgPSAnY29sbGFwc2VkJyB8ICdleHBhbmRlZCcgfCAnbG9hZGluZycgfCAnZGlzYWJsZWQnO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgRGF0YVRhYmxlQm9keUNlbGxDb21wb25lbnQgaW1wbGVtZW50cyBEb0NoZWNrLCBPbkRlc3Ryb3kge1xuICAgIHByaXZhdGUgY2Q7XG4gICAgZGlzcGxheUNoZWNrOiAocm93OiBhbnksIGNvbHVtbj86IFRhYmxlQ29sdW1uLCB2YWx1ZT86IGFueSkgPT4gYm9vbGVhbjtcbiAgICBncm91cDogYW55O1xuICAgIHJvd0hlaWdodDogbnVtYmVyO1xuICAgIGlzU2VsZWN0ZWQ6IGJvb2xlYW47XG4gICAgZXhwYW5kZWQ6IGJvb2xlYW47XG4gICAgcm93SW5kZXg6IG51bWJlcjtcbiAgICBjb2x1bW46IFRhYmxlQ29sdW1uO1xuICAgIHJvdzogYW55O1xuICAgIHNvcnRzOiBhbnlbXTtcbiAgICB0cmVlU3RhdHVzOiBUcmVlU3RhdHVzO1xuICAgIGFjdGl2YXRlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICB0cmVlQWN0aW9uOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjZWxsVGVtcGxhdGU6IFZpZXdDb250YWluZXJSZWY7XG4gICAgcmVhZG9ubHkgY29sdW1uQ3NzQ2xhc3NlczogYW55O1xuICAgIHJlYWRvbmx5IHdpZHRoOiBudW1iZXI7XG4gICAgcmVhZG9ubHkgbWluV2lkdGg6IG51bWJlcjtcbiAgICByZWFkb25seSBtYXhXaWR0aDogbnVtYmVyO1xuICAgIHJlYWRvbmx5IGhlaWdodDogc3RyaW5nIHwgbnVtYmVyO1xuICAgIHNhbml0aXplZFZhbHVlOiBhbnk7XG4gICAgdmFsdWU6IGFueTtcbiAgICBzb3J0RGlyOiBTb3J0RGlyZWN0aW9uO1xuICAgIGlzRm9jdXNlZDogYm9vbGVhbjtcbiAgICBvbkNoZWNrYm94Q2hhbmdlRm46IGFueTtcbiAgICBhY3RpdmF0ZUZuOiBhbnk7XG4gICAgY2VsbENvbnRleHQ6IGFueTtcbiAgICBwcml2YXRlIF9pc1NlbGVjdGVkO1xuICAgIHByaXZhdGUgX3NvcnRzO1xuICAgIHByaXZhdGUgX2NvbHVtbjtcbiAgICBwcml2YXRlIF9yb3c7XG4gICAgcHJpdmF0ZSBfZ3JvdXA7XG4gICAgcHJpdmF0ZSBfcm93SGVpZ2h0O1xuICAgIHByaXZhdGUgX3Jvd0luZGV4O1xuICAgIHByaXZhdGUgX2V4cGFuZGVkO1xuICAgIHByaXZhdGUgX2VsZW1lbnQ7XG4gICAgcHJpdmF0ZSBfdHJlZVN0YXR1cztcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50UmVmLCBjZDogQ2hhbmdlRGV0ZWN0b3JSZWYpO1xuICAgIG5nRG9DaGVjaygpOiB2b2lkO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgY2hlY2tWYWx1ZVVwZGF0ZXMoKTogdm9pZDtcbiAgICBvbkZvY3VzKCk6IHZvaWQ7XG4gICAgb25CbHVyKCk6IHZvaWQ7XG4gICAgb25DbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgb25EYmxDbGljayhldmVudDogTW91c2VFdmVudCk6IHZvaWQ7XG4gICAgb25LZXlEb3duKGV2ZW50OiBLZXlib2FyZEV2ZW50KTogdm9pZDtcbiAgICBvbkNoZWNrYm94Q2hhbmdlKGV2ZW50OiBhbnkpOiB2b2lkO1xuICAgIGNhbGNTb3J0RGlyKHNvcnRzOiBhbnlbXSk6IGFueTtcbiAgICBzdHJpcEh0bWwoaHRtbDogc3RyaW5nKTogc3RyaW5nO1xuICAgIG9uVHJlZUFjdGlvbigpOiB2b2lkO1xuICAgIGNhbGNMZWZ0TWFyZ2luKGNvbHVtbjogYW55LCByb3c6IGFueSk6IG51bWJlcjtcbn1cbiJdfQ==